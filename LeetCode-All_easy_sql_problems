=============================== Problem 619 Biggest Single Number ==============================
# Write your MySQL query statement below
WITH CTE AS(

SELECT num,
       COUNT(num) 
FROM mynumbers
GROUP BY num
HAVING COUNT(num) = 1
ORDER BY num DESC
)

SELECT MAX(num) AS num 
FROM CTE

=============================== Problem 627 Swap Salary ==============================
# Write your MySQL query statement below
/* Write a solution to swap all 'f' and 'm' values (i.e.,
change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables. */


UPDATE Salary
SET sex = IF(sex = 'f', 'm', 'f');

=============================== 1179. Reformat Department Table ==============================

/* Reformat the table such that there is a department id column and a revenue column for each month.

Return the result table in any order. */

# Write your MySQL query statement below

SELECT id,
       MAX(CASE WHEN month = 'Jan' THEN revenue END )AS 'Jan_Revenue',
       MAX(CASE WHEN month = 'Feb' THEN revenue END )AS 'Feb_Revenue',
       MAX(CASE WHEN month = 'Mar' THEN revenue END )AS 'Mar_Revenue',
       MAX(CASE WHEN month = 'Apr' THEN revenue END )AS 'Apr_Revenue',
       MAX(CASE WHEN month = 'May' THEN revenue END )AS 'May_Revenue',
       MAX(CASE WHEN month = 'Jun' THEN revenue END )AS 'Jun_Revenue',
       MAX(CASE WHEN month = 'Jul' THEN revenue END )AS 'Jul_Revenue',
       MAX(CASE WHEN month = 'Aug' THEN revenue END )AS 'Aug_Revenue',
       MAX(CASE WHEN month = 'Sep' THEN revenue END )AS 'Sep_Revenue',
       MAX(CASE WHEN month = 'Oct' THEN revenue END )AS 'Oct_Revenue',
       MAX(CASE WHEN month = 'Nov' THEN revenue END )AS 'Nov_Revenue',
       MAX(CASE WHEN month = 'Dec' THEN revenue END )AS 'Dec_Revenue'
FROM department
GROUP BY id

=============================== 1873. Calculate Special Bonus ==============================


# Write your MySQL query statement below
SELECT employee_id,
       IF(employee_id % 2 != 0 AND UPPER(LEFT(name,1)) != 'M', salary, 0) AS bonus
FROM employees
ORDER BY employee_id

=============================== Problem 1 ==============================
/* product_id is the primary key (column with unique values) for this table.
low_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
recyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.
Write a solution to find the ids of products that are both low fat and recyclable.
Return the result table in any order. */

###  Write your MySQL query statement below ###
SELECT product_id
FROM PRODUCTS
WHERE low_fats = "Y" AND recyclable = "Y"


======================================= Problem 2 ===================================
/* Write a solution to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
The result format is in the following example.
Example 1:

Input: 
Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+
*/

###  Write your MySQL query statement below ###
SELECT DISTINCT(author_id) as id
FROM Views
WHERE author_id = viewer_id
ORDER BY id ASC


==================================== Problem 3 ==================================
Write a solution to find the IDs of the invalid tweets.
The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.

###  Write your MySQL query statement below  ###
SELECT tweet_id FROM tweets
WHERE LENGTH(content) > 15


============================== Problem 4 =======================================
/* Write a solution to report the movies with an odd-numbered ID and a description that is not "boring".
Return the result table ordered by rating in descending order.
The result format is in the following example.
Example 1:
Cinema table:
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 1  | War        | great 3D    | 8.9    |
| 2  | Science    | fiction     | 8.5    |
| 3  | irish      | boring      | 6.2    |
| 4  | Ice song   | Fantacy     | 8.6    |
| 5  | House card | Interesting | 9.1    |
+----+------------+-------------+--------+
*/

###  Write your MySQL query statement below  ###
SELECT id, movie, description, rating 
FROM Cinema
WHERE id%2 != 0 AND description != "boring"
ORDER BY rating DESC


============================ Problem 5 ==============================
/* Write a solution to find the IDs of the invalid tweets. 
The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. */

### Write your MySQL query statement below ###
SELECT tweet_id FROM tweets
WHERE LENGTH(content) > 15

======================== Problem 6 ==================================
Table: Employees
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains the id and the name of an employee in a company.
Table: EmployeeUNI
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| unique_id     | int     |
+---------------+---------+
(id, unique_id) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains the id and the corresponding unique id of an employee in the company.
 Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.

### Write your MySQL query statement below ###
SELECT IFNULL(EmployeeUNI.unique_id, NULL) AS unique_id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;


